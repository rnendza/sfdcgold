public without sharing class clFillSvc {

    // AUTOGENERATED STUFF.
    public static final Set<String> ADDITIONAL_FILL_COLLECTION_TYPES =
            new Set<String> {'Additional Fill – RT Only','Additional Fill – VGT Only','Additional Fill – RT & VGT'};
    public static final String REGULAR_2ND_RT_COLLECTION_TYPE  = 'Regular - 2nd RT';

    public static final String FILL_TYPE_EMERGENCY = 'Emergency';
    public static final String RPS_STATUS_NOT_STARTED = 'Not Started';
    public static final String RPS_RT_STATUS_NOT_STARTED = 'Not Started';
    @TestVisible private final static String MDT_DEV_NAME_ADDITIONAL_FILL = 'createRsasAndMetersForAdditionalFill';
    public static Cash_Logistics_Automation_Setting__mdt automationMdt = CustomMetadataSvc.retrieveAutomationMetadata(MDT_DEV_NAME_ADDITIONAL_FILL);
    /**
     * @param routeScheduleAccountIds   A Set<Id> of Route_Schedule_Account.Id.
     * @return                          A List of Route_Processing_Sheet__c sObjects.
     *
     * @todo  we may want to go async on this if it's done via import / bulk.
     */
    public static List<Route_Processing_Sheet__c> createAdditionalFillRps(Set<Id> routeScheduleAccountIds) {

        List<Route_Schedule_Account__c> routeScheduleAccounts =
                clRouteScheduleAccountSvc.retrieveRouteScheduleAccountsByIds(routeScheduleAccountIds);

        List<Route_Processing_Sheet__c> routeProcessingSheetsCreated =
                new List<Route_Processing_Sheet__c>();

        if(!routeScheduleAccounts.isEmpty()) {
            routeProcessingSheetsCreated = createRps(routeScheduleAccounts);
            if(!routeProcessingSheetsCreated.isEmpty()) {
                createMeterReadings(routeProcessingSheetsCreated);
            }
        }
        return  routeProcessingSheetsCreated;
    }

    /**
     * @param routeScheduleAccounts     A List of Route_Schedule_Account__c sObjects.
     * @return                          A List of Route_Processing_Sheet__c sObjects.
     *
     * @todo semantics what is the difference between collection type and fill type.
     * @todo no value was specified for Fill type.. setting it to Emergency Fill but is that correct?
     */
    public static List<Route_Processing_Sheet__c> createRps(List<Route_Schedule_Account__c> routeScheduleAccounts) {


        List<Route_Processing_Sheet__c> routeProcessingSheets = new List<Route_Processing_Sheet__c>();

        Set<Id> rsIds = new Set<Id>();
        for(Route_Schedule_Account__c rsa : routeScheduleAccounts) {
            rsIds.add(rsa.Route_Schedule__c);
        }
        List<AggregateResult> ars = [
                SELECT Route_Schedule__c rsId, Count(Id) numRsRpsSheets
                FROM   Route_Processing_Sheet__c
                WHERE  Route_Schedule__c IN :rsIds
                GROUP By Route_Schedule__c
        ];
        Map<Id,Integer> mRsId_NumRps = new Map<Id,Integer>();
        for(AggregateResult ar : ars) {
            Id rsId = (Id)ar.get('rsId');
            Integer numRsRpsSheets = (Integer)ar.get('numRsRpsSheets');
            mRsId_NumRps.put(rsId,numRsRpsSheets);
        }
        Integer i = 0;
        Integer totalRps = 0;
        for(Route_Schedule_Account__c rsa : routeScheduleAccounts) {

            Route_Processing_Sheet__c rps = new Route_Processing_Sheet__c();

            rps.Account__c                  = rsa.Account__c;
            rps.Route_Schedule__c           = rsa.Route_Schedule__c;
            //  2/16/2022  This was being defaulted. This needs to be set.
            rps.Processing_Location__c      = rsa.Route_Schedule__r.Processing_Location__c;
            rps.Stop_Number__c              = rsa.Stop_Number__c;

            if(rps.Stop_Number__c == 0 || rps.Stop_Number__c == null) {
                if(mRsId_NumRps.containsKey(rsa.Route_Schedule__c)){
                    if(i == 0) {
                        totalRps = mRsId_NumRps.get(rsa.Route_Schedule__c);
                        System.debug('--> stop number test.. 0 idx totalRps='+totalRps);
                    } else {
                        totalRps++;
                        System.debug('--> stop number test.. '+i+' idx totalRps='+totalRps);
                    }
                    rps.Stop_Number__c = totalRps + 1;
                }
            }
            rps.Route_Schedule_Account__c   = rsa.Id;

            /*
             * 6/3/2022
             * @see https://accel-entertainment.monday.com/boards/1300348967/pulses/2741940850/posts/1529261946
             */
            //----->rps.Collection_Date__c  =   Date.today();
            rps.Collection_Date__c = rsa.Route_Schedule__r.Route_Collection_Date__c;

            rps.Route_Fill_Date__c  =   null;
            rps.Collection_Type__c  =   rsa.Collection_Type__c;
            rps.Fill_Type__c        =   FILL_TYPE_EMERGENCY;

            rps.Status__c                       =   RPS_STATUS_NOT_STARTED;
            rps.Redemption_Terminal_Status__c   =   RPS_RT_STATUS_NOT_STARTED;
            rps.Cassette_5_Note_Count_Outbound__c =rsa.Cassette_5_Fill_Level__c;
            rps.Cassette_1_Note_Count_Outbound__c = rsa.Cassette_1_Fill_Level__c;
            rps.Cassette_20_Note_Count_Outbound__c = rsa.Cassette_20_Fill_level__c;
            rps.Cassette_50_Note_Count_Outbound__c = rsa.Cassette_50_Fill_Level__c;
            rps.Cassette_100_Note_Count_Outbound__c = rsa.Cassette_100_Fill_Level__c;
            rps.Replenishment_Type__c = rsa.Replenishment_Type__c;

            /*
             * Added 2/8/2022  @see https://accel-entertainment.monday.com/boards/1300348967/pulses/2263041878
             */
            rps.Redemption_Asset__c = rsa.Redemption_Asset__c;

            routeProcessingSheets.add(rps);
            i++;
        }

        if(!routeProcessingSheets.isEmpty()) {
            insert routeProcessingSheets;
            if(automationMdt != null && automationMdt.Fire_Platform_Event__c) {
                Boolean peFired = pingClientWithMods(routeProcessingSheets);
                System.debug('---> was platform event fired? ' + peFired);
            }
        }
        return routeProcessingSheets;
    }

    /**
     * 1. Parse out route_schedule__c ids to send to client.
     * 2. Re-retrieve rps data to ensure we have correct fields.
     * 3. Translate rps records into json for client consumption.
     * 4. Build and Fire a Route_Schedule_Change__c Platform Event (one per method call).
     *
     * @param newRpss  New Route_Processing_Sheet__c sObjects added to Route Schedule(s).
     * @return         True if a Platform Event was fired, otherwise false.
     *
     * @todo change to support rpss added in bulk to different route schedules all at once.
     */
    public static Boolean pingClientWithMods( List<Route_Processing_Sheet__c> newRpss ) {
        Boolean peFired = false;

        if(!newRpss.isEmpty()) {
            String rsIds = '';
            Set<Id> rpsIds = new Set<Id>();

            //  Create comma delim string of rps ids to deliver to client.
            for (Route_Processing_Sheet__c rps : newRpss) {
                rsIds+=rps.Route_Schedule__c+',';
                rpsIds.add(rps.Id);
            }
            rsIds = rsIds.removeEnd(',');

            //  Create Rps Json to deliver to client.
            List<Route_Processing_Sheet__c> rpss = retrieveRpsData(rpsIds);
            String rpsJson = createRpsJson(rpss);

            //  Build and fire Platform Event to publish to subscribing clients.
            List <Route_Schedule_Change_PE__e> changePEs = new List<Route_Schedule_Change_PE__e>();
            Route_Schedule_Change_PE__e changePe    = new Route_Schedule_Change_PE__e();
            changePe.Publishing_Process_Name__c = 'clFillSvc';
            changePe.Object_JSON__c = rpsJson;
            changePe.Operation_Type__c = PlatformEventSvc.DML_ACTION_UPDATE;
            changePe.Route_Schedule_Ids__c = rsIds;
            changePe.Ui_Message__c = rpss[0].Route_Schedule_Account__r.Account__r.Name +
                    '  added to your route schedule by ' + rpss[0].CreatedBy.Name + '.';
            changePe.Status__c = 'Complete';
            changePEs.add(changePe);

            PlatformEventSvc.publishPlatformEvents(changePes);
            peFired = true;
        }
        return peFired;
    }

    /**
     * Create Json for client consumption via serializing the inner RPS wrappers.
     *
     * @param rpss  Route_Processing_Sheet__c sObjects added to Route Schedule(s).
     * @return      A string of Json of 1 to N RPS sObjects for client consumption.
     */
    @TestVisible
    private static String createRpsJson( List<Route_Processing_Sheet__c> rpss ) {
        String sJson;
        if(!rpss.isEmpty()) {
            List<RpsJson> rpsJsons = new List<RpsJson>();
            for (Route_Processing_Sheet__c rps : rpss) {
                rpsJsons.add(new RPSJson(rps));
            }
            sJson = JSON.serialize(rpsJsons);
        }
        return sJson;
    }

    /**
     *  Wrapper for a Route_Processing_Sheet__c sObject to create json with.
     */
    @TestVisible
    private class RPSJson {

        Id rpsId;
        String rpsName;
        String rpsLocName;
        String createdByName;

        public RPSJson(Route_Processing_Sheet__c rps) {
            this.rpsId = rps.Id;
            this.rpsName = rps.Name;
            this.rpsLocName = rps.Route_Schedule_Account__r.Account__r.Name;
            this.createdByName = rps.CreatedBy.Name;
        }
    }
    /**
     * @param rpsIds    A set of Route_Processing_Sheet__c.Ids
     * @return
     */
    @TestVisible
    private static List<Route_Processing_Sheet__c> retrieveRpsData(Set<Id> rpsIds) {
        return [
                SELECT  Id, Name, CreatedById,CreatedBy.Name,Route_Schedule_Account__r.Account__r.Name,
                        Route_Schedule__c
                FROM    Route_Processing_Sheet__c
                WHERE   Id IN :rpsIds
        ];
    }

    /**
     * Remove '2nd RT' types from meter readings creation process.
     *
     * @param routeProcessingSheets A List of Route_Processing_Sheet__c sObjects that were recently created.
     * @return                      A List of Route processing sheet that are not a '2nd RT' collection type.
     *
     * @see https://accel-entertainment.monday.com/boards/1300348967/pulses/1924837832
     * @see https://accel-entertainment.monday.com/boards/1300348967/pulses/2501602092
     * @see clFillSvcTest.remove2ndRtTypeFromMetersCreation_test
     */
    public static List<Route_Processing_Sheet__c> remove2ndRtFromMeterCreation( List<Route_Processing_Sheet__c> routeProcessingSheets ) {
        List<Route_Processing_Sheet__c> rpsFiltered  = new List<Route_Processing_Sheet__c>();

        if( !routeProcessingSheets.isEmpty() ) {
           for( Route_Processing_Sheet__c rps : routeProcessingSheets ) {
               if(!clBatchRouteProcessingSheetCreation.COL_TYPES_NO_METER_CREATION.contains(rps.Collection_Type__c)) {
                   rpsFiltered.add(rps);
                   System.debug(LoggingLevel.DEBUG,'--> removing this rps from meter creation: '+rps);
               }
           }
        }
        return rpsFiltered;
    }

    /**
     * @param routeProcessingSheets A List of Route_Processing_Sheet__c sObjects.
     * @return                      A List of Meter_Reading__c sObjects.
     */
    public static List<Meter_Reading__c> createMeterReadings(List<Route_Processing_Sheet__c> routeProcessingSheets) {

        routeProcessingSheets = remove2ndRtFromMeterCreation(routeProcessingSheets);

        List<Meter_Reading__c> meterReadingsIns = new List<Meter_Reading__c>();
        if(!routeProcessingSheets.isEmpty()) {
            Map<Id, Id> mRpsId_Account = new Map<Id, Id>();

            for (Route_Processing_Sheet__c rps : routeProcessingSheets) {
                mRpsId_Account.put(rps.Id, rps.Account__c);
            }

            Set<String> rtDevNames = new Set<String>{
                    'VGT'
            };
            Map<Id, Asset> accountMachines = AssetSvc.retrieveAccountMachines(new Set<Id>(mRpsId_Account.values()), rtDevNames);

            Map<Id, List<Asset>> mAccountId_Assets = new Map<Id, List<Asset>>();

            for (Asset asset : accountMachines.values()) {
                if (!mAccountId_Assets.containsKey(asset.AccountID)) {
                    mAccountId_Assets.put(asset.AccountId, new List<Asset>{
                            asset
                    });
                } else {
                    List<Asset> currAccountAssets = mAccountId_Assets.get(asset.AccountId);
                    currAccountAssets.add(asset);
                }
            }

            for (Route_Processing_Sheet__c rps : routeProcessingSheets) {

                List<Asset> rpsAssets = mAccountId_Assets.get(rps.Account__c);

                if (rpsAssets != null && !rpsAssets.isEmpty()) {
                    for (Asset rpsAsset : rpsAssets) {
                        Meter_Reading__c reading = new Meter_Reading__c();
                        reading.Asset__c = rpsAsset.Id;
                        reading.BV_Type__c = rpsAsset.BV_Type__c;
                        reading.Route_Processing_Sheet__c = rps.Id;
                        reading.Reading_Status__c = 'New';
                        meterReadingsIns.add(reading);
                    }
                }
            }
            insert meterReadingsIns;
        } else {
            System.debug(LoggingLevel.INFO,'No Meter readings created for rps '+routeProcessingSheets);
        }
        return meterReadingsIns;
    }
}