/**
 * General operations for PA_Advisory__c. Also contains operations to parse PA XML returned in the response
 * from RESTful calls. Finally contains operations to update custom metadata (ie start / end date) for the
 * scheduled calls ie. Metadata.Operations.enqueueDeployment
 *
 * @see PortalAdvisoryLoaderSvcTest
 */
public class PortalAdvisoryLoaderSvc {

    public static String DEFAULT_IMG_TYPE = 'jpeg'; // used to append to the base64 string in the RTE.

   /**
    * Retrieves ALL Fields except Base 64 String data  for supplied PA_Advisory__c Ids.
    *
    * @param paAdvisoryIds The Pa_Advisory__c sObject SFDC Ids.
    * @return A List of PA_Advisory__c sObjects.
    */
    public static List<PA_Advisory__c> retrievePaAdvisories(Set<Id> paAdvisoryIds) {
        List<PA_Advisory__c> paAdvisories = new List<PA_Advisory__c>();

        Set<String> excludeFields = new Set<String> {'Image_Base_64_String__c'};

        String q = '';
        q += 'SELECT {0} ';
        q += 'FROM   Pa_Advisory__c ';
        q += 'WHERE  Id IN :paAdvisoryIds ';
        q += 'ORDER BY Name ASC';

        String formattedQuery = String.format(q,getAllPaAdvisoryFields(excludeFields));
        paAdvisories = Database.query(formattedQuery);
        return paAdvisories;
    }

    /**
     * Retrieves ALL Fields for supplied PA_Advisory__c Ids.
     *
     * @param paAdvisoryIds The Pa_Advisory__c sObject SFDC Ids.
     * @param excludeFields The fields to exclude from SELECT *. (null or empty if you want them all)
     * @return A List of PA_Advisory__c sObjects.
     */
    public static List<PA_Advisory__c> retrievePaAdvisories(Set<Id> paAdvisoryIds,Set<String> excludeFields) {
        List<PA_Advisory__c> paAdvisories = new List<PA_Advisory__c>();

        String q = '';
        q += 'SELECT {0} ';
        q += 'FROM   Pa_Advisory__c ';
        q += 'WHERE  Id IN :paAdvisoryIds ';
        q += 'ORDER BY Name ASC';

        String formattedQuery = String.format(q,getAllPaAdvisoryFields(excludeFields));
        paAdvisories = Database.query(formattedQuery);
        return paAdvisories;
    }

    /**
     * @param userRecords The UserRecord retrieved from the RESTful Service
     * @return A List of Upserted PA_Advisory__c sObjects.
     */
    public static List<PA_Advisory__c> upsertPaRecords(List<UserRecord> userRecords) {
        List<PA_Advisory__c> paAdvisories = new List<PA_Advisory__c>();

        for(PortalAdvisoryLoaderSvc.UserRecord ur : userRecords) {
            PA_Advisory__c advisory = new PA_Advisory__c();

            advisory.GUID__c = ur.guid;
            advisory.Comments__c = ur.comments;
            advisory.Violations__c = ur.violations;
            advisory.Advisory_Number__c = ur.advisoryNumber;
            advisory.Advisory_Date__c = ur.dAdvisoryDate;
            advisory.Advisory_Number_And_Type__c =  ur.advisoryNumberAndType;
            advisory.Advisory_Type__c = ur.advisoryType;
            advisory.Request_Date__c = ur.dRequestDate;
            advisory.Docket_Number__c = ur.docketNumber;
            advisory.Exclusion_Period__c = ur.sExclusionPeriod;
            advisory.SSN__c = ur.ssn != null ? Integer.valueOf(ur.ssn) : null;
            advisory.First_Name__c = ur.firstName;
            advisory.Last_Name__c = ur.lastName;
            advisory.Birth_Date__c = ur.dBirthDate;
            advisory.Cell_Phone__c = ur.cellPhoneNumber;
            advisory.Phone__c = ur.telephoneNumber;
            advisory.Image_Base_64_String__c = ur.imageBase64String;
            advisory.Intake_Removal_Code__c = ur.intakeRemovalCode;
            advisory.Exclusion_Type__c = ur.exclusionType;
            advisory.Intake_Or_Removal__c = ur.intakeOrRemoval;

            if(String.isNotBlank(advisory.Image_Base_64_String__c)) {
                advisory.Has_Image__c = true;
                advisory.Photo__c = '<img src="data:image/'+DEFAULT_IMG_TYPE+';base64,'+advisory.Image_Base_64_String__c+'" />';  // RTE Field
            }

            writeAddress(ur,advisory);
            writePhysicalDesc(ur,advisory);

            paAdvisories.add(advisory);
        }

        upsert paAdvisories PA_Advisory__c.Fields.Advisory_Number_And_Type__c;  // UPSERT USING CONCAT KEY
        return paAdvisories;
    }

    /**
     * @param userRecord    The UserRecord from the deserialized xml.
     * @param paAdvisory    The PA_Advisory_Record__c to write to.
     */
    @TestVisible
    private static void writeAddress(PortalAdvisoryLoaderSvc.UserRecord userRecord, PA_Advisory__c paAdvisory) {
        if(userRecord.userAddress != null) {
            paAdvisory.Address_1__c = userRecord.userAddress.address1;
            paAdvisory.Address_2__c = userRecord.userAddress.address2;
            paAdvisory.Address_3__c = userRecord.userAddress.address3;
            paAdvisory.City__c = userRecord.userAddress.city;
            paAdvisory.State_Code__c = userRecord.userAddress.stateCode;
            paAdvisory.Postal_Code__c = userRecord.userAddress.postalCode;
        }
    }

   /**
    * @param userRecord    The UserRecord from the deserialized xml.
    * @param paAdvisory    The PA_Advisory_Record__c to write to.
    */
    @TestVisible
    private static void writePhysicalDesc(PortalAdvisoryLoaderSvc.UserRecord userRecord, PA_Advisory__c paAdvisory) {
        if(userRecord.userPhysicalDesc != null) {
            paAdvisory.Eye_Color__c = userRecord.userPhysicalDesc.eyeColor;
            paAdvisory.Hair_Color__c = userRecord.userPhysicalDesc.hairColor;
            paAdvisory.Gender__c = userRecord.userPhysicalDesc.gender;
            try {
                paAdvisory.Height_Ft__c = userRecord.userPhysicalDesc.heightFt != null ? String.valueOf(userRecord.userPhysicalDesc.heightFt) : null;
                paAdvisory.Height_In__c = userRecord.userPhysicalDesc.heightIn != null ? String.valueOf(userRecord.userPhysicalDesc.heightIn) : null;
                paAdvisory.Weight__c = userRecord.userPhysicalDesc.weight;
            } catch (Exception e) {
                System.debug(LoggingLevel.ERROR,e);
            }

        }
    }

   /**
    * Parse Provider Xml into Apex consumable classes.
    *
    * @param xmlBody xxx
    * @param debugUserRecords   Spit out parsed user records (truncates photo data)
    * @param debugLimits        SFDC Gov Limits
    * @param pullImageData      If false, truncates the base64 Image data.
    *
    * @return  a List of UserRecords;
    *
    *
    * @see  XmlTransformer https://github.com/zabroseric/sfdc-xml-parser
    * @see  Provider doc on xml?
    */
    public static List<UserRecord> parsePaXmlRecords(String xmlBody, Boolean debugUserRecords, Boolean debugLimits, Boolean pullImageData) {
        List<UserRecord> userRecords = new List<UserRecord>();

        XmlTransformer.RESERVED_WORDS = new List<String>{'true'}; //  Must be limited otherwise the regex will hit too complex gov limit.
        if (debugLimits) {
            System.debug('--> before xml deserialize: heapSize: '+Limits.getHeapSize());
        }
        Map<String, Object> objectMap = (Map<String, Object>) XmlTransformer.deserialize(xmlBody).toObject();
        if (debugLimits) {
            System.debug('--> after xml deserialize: heapSize: '+Limits.getHeapSize());
        }

        Integer iNumLoops = 0;
        for (String rootKey : objectMap.keySet()) { iNumLoops++;

            Map<String, Object> mXmlMap = (Map<String, Object>) objectMap.get(rootKey);

            for (String resultsKey : mXmlMap.keySet()) { iNumLoops++;

                Map<String, Object> mAdvisory = (Map<String, Object>) mXmlMap.get(resultsKey);

                if (mAdvisory != null) {
                    for (String advisoryKey : mAdvisory.keySet()) { iNumLoops++;

                        //  If only one record we must be careful here.
                        List<Object> allAdvisoryObjects;
                        Boolean isList = mAdvisory.get(advisoryKey) instanceof List<Object>;
                        if(isList) {
                            allAdvisoryObjects = (List<Object>) mAdvisory.get(advisoryKey);
                        } else {
                            Object singleAdvisoryObject = mAdvisory.get(advisoryKey);
                            allAdvisoryObjects = new List<Object>();
                            allAdvisoryObjects.add(singleAdvisoryObject);
                        }
                        //-------

                        for (Object advisoryObject : allAdvisoryObjects) { iNumLoops++;
                            UserRecord user = new UserRecord();

                            Map<String, Object> mSingleAdvisory = (Map<String, Object>) advisoryObject;

                            if(mSingleAdvisory.containsKey('attributes')) {
                                //  <Advisory ExclusionType="VGTs" IntakeOrRemoval="I" AdvisoryType="VGT">
                                Map<string,Object> mAttributes = (Map<String,Object>)mSingleAdvisory.get('attributes');
                                user.exclusionType = (String)mAttributes.get('ExclusionType');
                                user.intakeOrRemoval = (String)mAttributes.get('IntakeOrRemoval');
                                user.advisoryType = (String)mAttributes.get('AdvisoryType');
                            }

                            user.ssn = (String) mSingleAdvisory.get('SSN');
                            user.guid = (String) mSingleAdvisory.get('APIUserGuid');
                            user.advisoryNumber = (String) mSingleAdvisory.get('AdvisoryNumber');
                            user.firstName = (String) mSingleAdvisory.get('FirstName');
                            user.lastName = (String) mSingleAdvisory.get('LastName');
                            user.dAdvisoryDate = convertToDate(mSingleAdvisory.get('AdvisoryDate'));
                            user.dRequestDate = convertToDate(mSingleAdvisory.get('RequestDate'));
                            user.dBirthDate = convertToDate(mSingleAdvisory.get('BirthDate'));
                            user.advisoryNumberAndType = user.advisoryNumber+user.advisoryType;
                            user.sExclusionPeriod = (String) mSingleAdvisory.get('ExclusionPeriod');
                            user.docketNumber = (String) mSingleAdvisory.get('DocketNumber');
                            user.cellPhoneNumber = (String) mSingleAdvisory.get('CellphoneNumber');
                            user.telephoneNumber = (String)mSingleAdvisory.get('TelephoneNumber');
                            if(pullImageData) {
                                user.imageBase64String = (String) mSingleAdvisory.get('Photo');
                                user.hasImage = user.imageBase64String != null && user.imageBase64String != '';
                            }
                            user.imageSize = user.imageBase64String?.length();
                            user.intakeRemovalCode = (String) mSingleAdvisory.get('IntakeRemovalCode');
                            user.comments = (String) mSingleAdvisory.get('Comments');
                            if(user.comments == null || user.comments == '') {
                                user.comments = 'None Provided';
                            }
                            user.violations = (String) mSingleAdvisory.get('Violations');
                            if(user.violations == null || user.violations == '') {
                                user.violations = 'None Provided';
                            }

                            Map<String,Object> mAddress = (Map<String,Object>) mSingleAdvisory.get('Address');
                            parseAddress(mAddress,user);

                            Map<String,Object> mPhysicalDesc = (Map<String,Object>) mSingleAdvisory.get('PhysicalDesc');
                            parsePhysicalDesc(mPhysicalDesc,user);

                            userRecords.add(user);
                        }
                    }
                } else {
                    System.debug(LoggingLevel.WARN,'No User Data in XML!');
                }
            }
        }

        if (debugUserRecords) {
            String msg = '\n\n === PARSED USER STUFF ('+userRecords.size() +' user records found) ====\n';
            msg +='(Note base64 data truncated when debugging for clarity)\n';
            for (UserRecord ur : userRecords) {
                msg += '\n---> ' + ur + '\n';
            }
            System.debug(msg + '\n\n');
        }
        if(debugLimits) {
            System.debug('---> # of times in for loop: ' + iNumLoops);
        }
        return userRecords;
    }

   /**
    * Enqueue job to use the Metadata.Deploy container to update the custom metadata record.
    * (A fancy version of a DML Update)  This will call back when done to handleResult.
    *
    * @param metdataName            The api Custom mdt name ie. (Cash_Logistics_Setting__mdt)
    * @param recordDevName          The record dev name ie. (Scheduler)
    * @param label                  The record label ie. (Scheduler)
    * @param metadataFieldValueMap  A map of Field_Api_Name => new field value ie. (Next_Cycle__c => 5)
    * @return                       The Job Id fired.
    *
    */
    public static Id updateCustomMetadata(  String metdataName, String recordDevName, String label,
                                            Map<String, Object> metadataFieldValueMap) {

        Metadata.CustomMetadata cMetadata = new Metadata.CustomMetadata();
        cMetadata.fullName = metdataName + '.' + recordDevName;
        cMetadata.label = label;

        for(String key : metadataFieldValueMap.keySet()){
            Metadata.CustomMetadataValue cMetadataValue = new Metadata.CustomMetadataValue();
            cMetadataValue.Field = key;
            cMetadataValue.Value = metadataFieldValueMap.get(key);
            cMetadata.values.add(cMetadataValue);
        }
        Metadata.DeployContainer mdContainer = new Metadata.DeployContainer();
        mdContainer.addMetadata(cMetadata);
        CustomMetadataCallBack callback = new CustomMetadataCallBack();
        Id jobId;

        if(!Test.isRunningTest()) {
            jobId = Metadata.Operations.enqueueDeployment(mdContainer, callback);
        }

        System.debug('---> fire job:'+jobId);
        return jobId;
    }

    /**
     * @param xmlBody the xml body
     * @return  A List<String> of error messages.
     */
    public static List<String> findProviderErrors(String xmlBody) {
        List<String> errors = new List<String>();

        XmlTransformer.RESERVED_WORDS = new List<String>{'true'}; //  Must be limited otherwise the regex will hit too complex gov limit.
        Map<String, Object> objectMap = (Map<String, Object>) XmlTransformer.deserialize(xmlBody).toObject();

        for (String rootKey : objectMap.keySet()) {
            Map<String, Object> mXmlMap = (Map<String, Object>) objectMap.get(rootKey);

            for (String errorsKey : mXmlMap.keySet()) {
                Map<String, Object> mErrors = (Map<String, Object>) mXmlMap.get(errorsKey);
                if (mErrors != null && !mErrors.isEmpty()) {
                    for (String errorKey : mErrors.keySet()) {
                        Object oError = mErrors.get(errorKey);
                        if (oError != null) {
                            errors.add((String) oError);
                        }
                    }
                }
            }
        }
        return errors;
    }

    /**
     * @return Number of PA_Advisory__c records
     */
    public static Integer retrieveNumAdvisoryRecords() {
        return [ SELECT Count() FROM PA_Advisory__c ];
    }

    /**
     * @return Max Advisory_Date__c from PA_Advisory__c.
     */
    public static Date retrieveMaxAdvisoryDate() {
        Date maxDate;
        List<AggregateResult> ars = [SELECT Max(Advisory_Date__c) MaxDate FROM PA_Advisory__c ];
        if(!ars.isEmpty()) {
            maxDate = (Date) (ars[0].get('MaxDate'));
        }
        return maxDate;
    }

   /**
    * @return Min Advisory_Date__c from PA_Advisory__c.
    */
    public static Date retrieveMinAdvisoryDate() {
        Date minDate;
        List<AggregateResult> ars = [SELECT Min(Advisory_Date__c) MinDate FROM PA_Advisory__c ];
        if(!ars.isEmpty()) {
            minDate = (Date) (ars[0].get('MinDate'));
        }
        return minDate;
    }

    /**
     * @param mAddress  The map containing the Address object in the xml.
     * @param user      The UserRecord to write to.
     */
    @TestVisible
    private static void parseAddress(Map<String,Object> mAddress, UserRecord user) {
        user.userAddress.address1 = (String)mAddress.get('Address1');
        user.userAddress.address2 = (String)mAddress.get('Address2');
        user.userAddress.address3 = (String)mAddress.get('Address3');
        user.userAddress.city = (String)mAddress.get('City');
        user.userAddress.stateCode = (String)mAddress.get('StateCode');
        user.userAddress.postalCode = (String)mAddress.get('PostalCode');
    }

   /**
    * @param mPhysicalDesc  The map containing the Physical Desc in the xml.
    * @param user           The UserRecord to write to.
    */
    @TestVisible
    private static void parsePhysicalDesc(Map<String,Object> mPhysicalDesc, UserRecord user) {
        user.userPhysicalDesc.hairColor = (String)mPhysicalDesc.get('HairColor');
        user.userPhysicalDesc.eyeColor = (String)mPhysicalDesc.get('EyeColor');
        user.userPhysicalDesc.gender = (String)mPhysicalDesc.get('Gender');
        user.userPhysicalDesc.heightFt = convertToInt(mPhysicalDesc.get('HeightFt'));
        user.userPhysicalDesc.heightIn = convertToInt(mPhysicalDesc.get('HeightIn'));
        user.userPhysicalDesc.weight = convertToInt(mPhysicalDesc.get('Weight'));
        if(user.userPhysicalDesc.heightFt != null && user.userPhysicalDesc.heightIn != null) {
            user.userPhysicalDesc.heightDisplay = user.userPhysicalDesc.heightFt+'-'+user.userPhysicalDesc.heightIn;
        }
        user.userPhysicalDesc.distinguishingMarks = (String)mPhysicalDesc.get('DistinguishingMarks');
    }

   /**
    * Wrap each person up and use however you want.
    * @see UserAddress
    * @see UserPhysicalDesc
    */
    public class UserRecord {

        @AuraEnabled public String ssn;
        @AuraEnabled public String guid;
        @AuraEnabled public Date dBirthDate;
        @AuraEnabled public Date dAdvisoryDate;
        @AuraEnabled public Date dRequestDate;
        @AuraEnabled public String advisoryType;
        @AuraEnabled public String advisoryNumber;
        @AuraEnabled public String advisoryNumberAndType;
        @AuraEnabled public String sExclusionPeriod; // 1 year, 5 years, Lifetime and X Year(s)
        @AuraEnabled public String exclusionType; // Casino, Casino Exclusion Fantasy Contest, Fantasy Exclusion, iGaming, iGaming Exclusion, VGT and VGT Exclusion
        @AuraEnabled public String lastName;
        @AuraEnabled public String firstName;
        @AuraEnabled public String imageBase64String;
        @AuraEnabled public Integer imageSize;
        @AuraEnabled public String cellPhoneNumber;
        @AuraEnabled public String telephoneNumber;
        @AuraEnabled public Boolean hasImage;
        @AuraEnabled public String intakeOrRemoval;
        @AuraEnabled public String intakeRemovalCode;
        @AuraEnabled public String docketNumber;
        @AuraEnabled public String comments;
        @AuraEnabled public String violations;

        @AuraEnabled public UserAddress userAddress;
        @AuraEnabled public UserPhysicalDesc userPhysicalDesc;

        @AuraEnabled public PA_Advisory__c paAdvisory;  //  Matched SFDC Record.

        public UserRecord() {
            this.userAddress = new UserAddress();
            this.userPhysicalDesc = new UserPhysicalDesc();
        }
    }

    public class UserAddress {
        @AuraEnabled public String address1;
        @AuraEnabled public String address2;
        @AuraEnabled public String address3;
        @AuraEnabled public String city;
        @AuraEnabled public String stateCode;
        @AuraEnabled public String postalCode;
    }

    public class UserPhysicalDesc {
        @AuraEnabled public String hairColor;
        @AuraEnabled public String eyeColor;
        @AuraEnabled public String gender;
        @AuraEnabled public Integer heightFt;
        @AuraEnabled public Integer heightIn;
        @AuraEnabled public String  heightDisplay;
        @AuraEnabled public Integer weight;
        @AuraEnabled public String  distinguishingMarks;
    }

    /**
     * Handle callback from a metadata deploy (update mdt)
     */
    public class CustomMetadataCallBack implements Metadata.DeployCallback {

        public void handleResult(Metadata.DeployResult result, Metadata.DeployCallbackContext context) {
            System.debug('---> result='+result);
            System.debug('----> context = '+context);
        }
    }

    public static Date convertToDate(Object o) {
        Date dt;
        if (o != null && o instanceof String) {
            dt = Date.parse((String)o);
        }
        return dt;
    }

    @TestVisible
    private static Integer convertToInt(Object o) {
        Integer i;
        if (o != null && o instanceof String) {
            i = Integer.valueOf(o);
        }
        return i;
    }
    /**
     * @param excludeFields  Any fields to be excludes (null or empty if you want them all)
     * @return                List of fields suitable for substitution in a SELECT.
     */
    public static List<String>  getAllPaAdvisoryFields(Set<String> excludeFields) {
        Map<String, Schema.SObjectField> fieldsMap = PA_Advisory__c.sObjectType.getDescribe().fields.getMap();
        String sFields;
        List<String> filteredFields = new List<String>();

        if( excludeFields != null && !excludeFields.isEmpty()) {
            for (String fieldName : fieldsMap.keySet()) {
                if(!excludeFields.contains(fieldName)) {
                    filteredFields.add(fieldName);
                }
            }
            sFields = String.join(filteredFields,',');
        } else {
            sFields = String.join(new List<String>(fieldsMap.keySet()), ',');
        }
        List<String> fields = new List<String>{sfields};
        return fields;
    }

    //  ======  SAMPLE VALID XML RECORD'S FOR TESTING PURPOSES
    @TestVisible
    private static String retrieveMockXml() {
        String mockXml = '<SelfExclusionAPIQuery><Results><Advisory ExclusionType="VGTs" IntakeOrRemoval="I" AdvisoryType="VGT"><BirthDate>06/14/1973</BirthDate><SSN>7464</SSN><AdvisoryNumber>VGT-000864</AdvisoryNumber><AdvisoryDate>07/06/2022</AdvisoryDate><RequestDate>6/30/2022</RequestDate><ExclusionPeriod>Five Years</ExclusionPeriod><IntakeRemovalCode>I</IntakeRemovalCode><DocketNumber>22-00864-SE</DocketNumber><LastName>Peltier</LastName><FirstName>Mark</FirstName><AliasName></AliasName><CellphoneNumber></CellphoneNumber><TelephoneNumber>4124195730</TelephoneNumber><Violations></Violations><Comments></Comments><Photo></Photo><APIUserGuid>e34c30b5-efe1-42e8-9153-0a9c8a79d662</APIUserGuid><EnrollmentAdvisoryNumber></EnrollmentAdvisoryNumber><Address><Address1>909 WOODLAND AVE</Address1><Address2></Address2><Address3></Address3><City>MCKEESPORT</City><StateCode>PA</StateCode><PostalCode>15133</PostalCode></Address><PhysicalDesc><DistinguishingMarks/><HairColor>Bald</HairColor><EyeColor>Brown</EyeColor><Gender>M</Gender><HeightFt>5</HeightFt><HeightIn>5</HeightIn><Weight/></PhysicalDesc></Advisory><Advisory ExclusionType="VGTs" IntakeOrRemoval="I" AdvisoryType="VGT"><BirthDate>12/01/1993</BirthDate><SSN>9599</SSN><AdvisoryNumber>VGT-000865</AdvisoryNumber><AdvisoryDate>07/06/2022</AdvisoryDate><RequestDate>6/30/2022</RequestDate><ExclusionPeriod>One Year</ExclusionPeriod><IntakeRemovalCode>I</IntakeRemovalCode><DocketNumber>22-00865-SE</DocketNumber><LastName>Berzinsky</LastName><FirstName>Alec</FirstName><AliasName></AliasName><CellphoneNumber>4848948416</CellphoneNumber><TelephoneNumber/><Violations></Violations><Comments></Comments><Photo></Photo><APIUserGuid>73c468f2-0745-47bb-aee5-cd2880751506</APIUserGuid><EnrollmentAdvisoryNumber></EnrollmentAdvisoryNumber><Address><Address1>2110 PENNSYLVANIA AVE</Address1><Address2>APT K6</Address2><Address3></Address3><City>BETHLEHEM</City><StateCode>PA</StateCode><PostalCode>18018</PostalCode></Address><PhysicalDesc><DistinguishingMarks/><HairColor>Brown</HairColor><EyeColor>Hazel</EyeColor><Gender>M</Gender><HeightFt>5</HeightFt><HeightIn>8</HeightIn><Weight/></PhysicalDesc></Advisory><Advisory ExclusionType="VGTs" IntakeOrRemoval="I" AdvisoryType="VGT"><BirthDate>08/28/1990</BirthDate><SSN>2530</SSN><AdvisoryNumber>VGT-000866</AdvisoryNumber><AdvisoryDate>07/06/2022</AdvisoryDate><RequestDate>7/1/2022</RequestDate><ExclusionPeriod>Five Years</ExclusionPeriod><IntakeRemovalCode>I</IntakeRemovalCode><DocketNumber>22-00866-SE</DocketNumber><LastName>Cameron</LastName><FirstName>Brian</FirstName><AliasName></AliasName><CellphoneNumber></CellphoneNumber><TelephoneNumber>2676643595</TelephoneNumber><Violations></Violations><Comments></Comments><Photo></Photo><APIUserGuid>ddf2a712-fddd-4777-b461-46bc08942750</APIUserGuid><EnrollmentAdvisoryNumber></EnrollmentAdvisoryNumber><Address><Address1>639 MORRIS ST</Address1><Address2></Address2><Address3></Address3><City>PHILADELPHIA</City><StateCode>PA</StateCode><PostalCode>19148</PostalCode></Address><PhysicalDesc><DistinguishingMarks/><HairColor>Brown</HairColor><EyeColor>Hazel</EyeColor><Gender>M</Gender><HeightFt>6</HeightFt><HeightIn>2</HeightIn><Weight/></PhysicalDesc></Advisory></Results></SelfExclusionAPIQuery>';
        return mockXml;
    }

    //  ======  SAMPLE VALID XML RECORDS FOR TESTING PURPOSES
    @TestVisible
    private static String retrieveMockXml_1record() {
        String mockXml = '<SelfExclusionAPIQuery><Results><Advisory ExclusionType="VGTs" IntakeOrRemoval="I" AdvisoryType="VGT"><BirthDate>06/14/1973</BirthDate><SSN>7464</SSN><AdvisoryNumber>VGT-000864</AdvisoryNumber><AdvisoryDate>07/06/2022</AdvisoryDate><RequestDate>6/30/2022</RequestDate><ExclusionPeriod>Five Years</ExclusionPeriod><IntakeRemovalCode>I</IntakeRemovalCode><DocketNumber>22-00864-SE</DocketNumber><LastName>Peltier</LastName><FirstName>Mark</FirstName><AliasName></AliasName><CellphoneNumber></CellphoneNumber><TelephoneNumber>4124195730</TelephoneNumber><Violations></Violations><Comments></Comments><Photo></Photo><APIUserGuid>e34c30b5-efe1-42e8-9153-0a9c8a79d662</APIUserGuid><EnrollmentAdvisoryNumber></EnrollmentAdvisoryNumber><Address><Address1>909 WOODLAND AVE</Address1><Address2></Address2><Address3></Address3><City>MCKEESPORT</City><StateCode>PA</StateCode><PostalCode>15133</PostalCode></Address><PhysicalDesc><DistinguishingMarks/><HairColor>Bald</HairColor><EyeColor>Brown</EyeColor><Gender>M</Gender><HeightFt>5</HeightFt><HeightIn>5</HeightIn><Weight/></PhysicalDesc></Advisory></Results></SelfExclusionAPIQuery>';        return mockXml;
    }

    //  ======  SAMPLE VALID XML INDICATING A PROVIDER ERROR
    @TestVisible
    private static String retrieveMockErrorXml() {
        String mockXml ='<PGCBSEInquiry><Errors><Error>{Error Code} – {Error Description}</Error></Errors></PGCBSEInquiry>';
        return mockXml;
    }

    //  ======  SAMPLE NO RESULTS FOUND AT PROVIDER
    @TestVisible
    private static String retrieveMockNoResultsXml() {
        String mockXml = '<SelfExclusionAPIQuery><Results></Results></SelfExclusionAPIQuery>';
        return mockXml;
    }
}